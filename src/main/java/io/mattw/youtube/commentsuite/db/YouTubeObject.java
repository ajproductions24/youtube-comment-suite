package io.mattw.youtube.commentsuite.db;

import com.google.api.client.util.ArrayMap;
import com.google.api.services.youtube.model.ResourceId;
import io.mattw.youtube.commentsuite.ImageCache;
import javafx.scene.image.Image;

import java.io.Serializable;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Stream;

/**
 * Similarities between GroupItem, YouTubeChannel, YouTubeComment, and YouTubeVideo.
 *
 */
public abstract class YouTubeObject implements ImageCache, Serializable {

    private String id;
    private String title;
    private String thumbUrl;

    // Transient, we don't want this in export file.
    private transient YType typeId;

    /**
     * This field differs from what's returned by  {@link #buildYouTubeLink()} because it is used solely by
     * {@link GroupItem} as part of field duplication.
     */
    private transient String youTubeLink;

    public YouTubeObject() {
        typeId = YType.UNKNOWN;
    }

    /**
     * @param id       id of the youtube video, playlist, channel
     * @param title    video title, playlist name, channel name
     * @param thumbUrl url of thumbnail, profile picture
     */
    public YouTubeObject(final String id, final String title, final String thumbUrl) {
        this.id = id;
        this.title = title;
        this.thumbUrl = thumbUrl;
    }

    /**
     * Constructor for SearchResult where search results could be of any type (video, channel, playlist)
     *
     * @param id       resourceId from {@link com.google.api.services.youtube.model.SearchResult}
     * @param title    video title, playlist name, channel name
     * @param thumbUrl url of thumbnail, profile picture
     */
    public YouTubeObject(final ResourceId id, final String title, final String thumbUrl) {
        this.id = getIdFromResource(id);
        this.title = title;
        this.thumbUrl = thumbUrl;
    }

    public YType getTypeId() {
        return typeId;
    }

    public void setTypeId(YType typeId) {
        this.typeId = typeId;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getThumbUrl() {
        return thumbUrl;
    }

    public void setThumbUrl(String thumbUrl) {
        this.thumbUrl = thumbUrl;
    }

    public String getYouTubeLink() {
        return youTubeLink;
    }

    public void setYouTubeLink(String youTubeLink) {
        this.youTubeLink = youTubeLink;
    }

    public String getTypeName() {
        return typeId.getDisplay();
    }

    /**
     * The Default Thumb is a letter avatar generated by the first character in the {@link #title}.
     * <p>
     * Since the default thumb is generated, there is no load time compared to the loading
     * of a new Image(thumbUrl);
     * <p>
     * The actual thumb can be loaded separately in a temporary thread and replace this
     * default thumbnail.
     *
     * @return letter avatar image of first char of {@link #title}
     */
    public Image getDefaultThumb() {
        return ImageCache.toLetterAvatar(this);
    }

    /**
     * Returns a full youtube link for videos, channels, playlists, and comments.
     *
     * @return full youtube link for the associated object's type
     */
    public String buildYouTubeLink() {
        switch (typeId) {
            case VIDEO:
                return "https://youtu.be/" + id;
            case CHANNEL:
                return "https://www.youtube.com/channel/" + id;
            case PLAYLIST:
                return "https://www.youtube.com/playlist?list=" + id;
            case COMMENT:
                return "https://www.youtube.com/watch?v=" +
                        (this instanceof YouTubeComment ? ((YouTubeComment) this).getVideoId() +
                                "&lc=" + id : id);
            default:
                return "https://www.youtube.com/error/" + id;
        }
    }

    public String toString() {
        return getId();
    }

    public boolean equals(Object o) {
        return o instanceof YouTubeObject && ((YouTubeObject) o).getId() != null && ((YouTubeObject) o).getId().equals(id);
    }

    /**
     * For some reason this value returns as an ArrayMap? Cast and return correct value from it.
     *
     * @return channelId
     */
    public static String getChannelIdFromObject(final Object authorChannelId) {
        if (authorChannelId instanceof ArrayMap) {
            return ((ArrayMap<String, String>) authorChannelId).get("value");
        }

        return Optional.ofNullable(authorChannelId)
                .map(Object::toString)
                .orElse(null);
    }

    /**
     * @return id of video, channel, or playlist
     */
    public static String getIdFromResource(final ResourceId resourceId) {
        return Stream.of(resourceId.getVideoId(), resourceId.getChannelId(), resourceId.getPlaylistId())
                .filter(Objects::nonNull)
                .findFirst()
                .orElse(null);
    }
}
